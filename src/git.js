import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import chalk from 'chalk';
import { loadConfig } from './config.js';

export class GitIntegration {
    constructor() {
        this.config = loadConfig();
    }

    async commitAndPushReport(reportPath, date) {
        if (!this.config.gitIntegration?.enabled) {
            return false;
        }

        const { repoPath, userFolder, autoCommit, autoPush } = this.config.gitIntegration;
        
        try {
            // Ensure user folder exists in the repo
            const userFolderPath = path.join(repoPath, userFolder);
            if (!fs.existsSync(userFolderPath)) {
                fs.mkdirSync(userFolderPath, { recursive: true });
                console.log(chalk.gray(`üìÅ Created user folder: ${userFolder}`));
            }

            // Create month folder (e.g., "July-2025")
            const reportDate = new Date(date);
            const monthYear = reportDate.toLocaleDateString('en-US', { 
                month: 'long', 
                year: 'numeric' 
            }).replace(' ', '-');
            
            const monthFolderPath = path.join(userFolderPath, monthYear);
            if (!fs.existsSync(monthFolderPath)) {
                fs.mkdirSync(monthFolderPath, { recursive: true });
                console.log(chalk.gray(`üìÅ Created month folder: ${userFolder}/${monthYear}`));
            }

            // Copy report to git repo
            const fileName = path.basename(reportPath);
            const targetPath = path.join(monthFolderPath, fileName);
            
            const reportContent = fs.readFileSync(reportPath, 'utf8');
            fs.writeFileSync(targetPath, reportContent);
            
            console.log(chalk.gray(`üìÑ Copied report to: ${targetPath}`));

            // Change to repo directory
            process.chdir(repoPath);

            // Check if repo has any changes
            const status = execSync('git status --porcelain', { encoding: 'utf8' });
            
            if (status.trim() === '') {
                console.log(chalk.yellow('‚ÑπÔ∏è  No changes to commit in git repo'));
                return true;
            }

            if (autoCommit) {
                // Add the file
                execSync(`git add "${path.join(userFolder, monthYear, fileName)}"`, { encoding: 'utf8' });
                console.log(chalk.gray('‚úÖ Added report to git'));

                // Create commit message
                const dateStr = new Date(date).toISOString().split('T')[0];
                const commitMessage = `Add daily progress report for ${dateStr}

üìä Generated by Easy Tracking Process
üë§ Author: ${userFolder}
üìÖ Date: ${dateStr}`;

                // Commit
                execSync(`git commit -m "${commitMessage}"`, { encoding: 'utf8' });
                console.log(chalk.green('‚úÖ Committed report to git'));

                if (autoPush) {
                    // Pull first to avoid conflicts
                    console.log(chalk.gray('‚¨áÔ∏è  Pulling latest changes...'));
                    try {
                        execSync('git pull --rebase', { encoding: 'utf8' });
                        console.log(chalk.gray('‚úÖ Successfully pulled latest changes'));
                    } catch (pullError) {
                        console.log(chalk.yellow('‚ö†Ô∏è  Pull failed, trying simple pull...'));
                        try {
                            execSync('git pull', { encoding: 'utf8' });
                        } catch (simplePullError) {
                            console.log(chalk.yellow('‚ö†Ô∏è  Auto-pull failed, pushing anyway...'));
                        }
                    }

                    // Push to remote
                    console.log(chalk.gray('üöÄ Pushing to remote...'));
                    execSync('git push', { encoding: 'utf8' });
                    console.log(chalk.green('‚úÖ Pushed report to remote repository'));
                }
            }

            return true;

        } catch (error) {
            console.error(chalk.red('‚ùå Git integration failed:'), error.message);
            console.log(chalk.yellow('üí° Report was still saved locally'));
            return false;
        }
    }

    async validateGitRepo(repoPath) {
        try {
            // Check if directory exists
            if (!fs.existsSync(repoPath)) {
                return { valid: false, error: 'Directory does not exist' };
            }

            // Check if it's a git repository
            const gitDir = path.join(repoPath, '.git');
            if (!fs.existsSync(gitDir)) {
                return { valid: false, error: 'Not a git repository' };
            }

            // Check if we can run git commands
            process.chdir(repoPath);
            execSync('git status', { encoding: 'utf8', stdio: 'pipe' });

            return { valid: true };

        } catch (error) {
            return { valid: false, error: error.message };
        }
    }

    async getCurrentBranch(repoPath) {
        try {
            process.chdir(repoPath);
            const branch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
            return branch;
        } catch (error) {
            return 'unknown';
        }
    }

    async getRemoteUrl(repoPath) {
        try {
            process.chdir(repoPath);
            const remote = execSync('git remote get-url origin', { encoding: 'utf8' }).trim();
            return remote;
        } catch (error) {
            return 'no remote configured';
        }
    }
}